##
## Fastlane configuration for the Nevis Mobile Authentication SDK Example App React Android application.
## See https://docs.fastlane.tools
##

default_platform(:android)

root_dir = File.expand_path(File.join(File.dirname(__FILE__), "../"))
signing_configs_gradle = File.join(root_dir, "app/signing_configs.gradle")
display_name = "Nevis Mobile Authentication SDK Example App React Android"
build_gradle = File.join(root_dir, "build.gradle")

def report_on_success(message)
	slack(
		message: "#{message}\nCheck build logs: #{ENV['CURRENT_BUILD_URL']}",
		slack_url: ENV["SLACK_WEBHOOK_URL"]
	) if ENV["SLACK_WEBHOOK_URL"]
end

def report_on_error(message, exception)
	slack(
		message: "#{message}\nCheck build logs: #{ENV['CURRENT_BUILD_URL']}",
		slack_url: ENV["SLACK_WEBHOOK_URL"],
		success: false,
		attachment_properties: {
			fields: [
				{
					title: "Error message",
					value: exception.to_s,
					short: false
				}
			]
		}
	) if ENV["SLACK_WEBHOOK_URL"]
	UI.user_error!(exception.to_s)
end

def get_boolean?(input)
	return false if input.nil?

	bool_input = input.to_s.downcase
	["true", "1"].include?(bool_input)
end

platform :android do
	desc "Pull request build"
	desc ""
	lane :pr do
		utilize_private_repos
		build
	end

	desc "Continuous build"
	desc "#### Options"
	desc " * **`version`**: The version of the application."
	desc " * **`build_number`**: The build number of the application."
	desc ""
	lane :develop do |options|
		utilize_private_repos
		distribute(options)
	end

	desc "Release build"
	desc "#### Options"
	desc " * **`version`**: The version of the application."
	desc " * **`build_number`**: The build number of the application."
	desc ""
	lane :main do |options|
		distribute(options)
	end

	####
	#### Private lanes
	####

	desc "Utilize private repositories"
	desc ""
	private_lane :utilize_private_repos do
		private_maven_repository_url = ENV["PRIVATE_NATIVE_REPOSITORY_URL"]
		modify_gradle_file(
			gradle_file_path: build_gradle,
			constant: "url",
			value: private_maven_repository_url
		) if private_maven_repository_url
	end

	desc "Build the application"
	desc ""
	private_lane :build do
		new_arch_enabled = ENV["NEW_ARCH_ENABLED"].nil? ? true : get_boolean?(ENV["NEW_ARCH_ENABLED"])
		sh("yarn react-native build-android --mode Debug --extra-params -PnewArchEnabled=#{new_arch_enabled}")
	end

	desc "Distribute the application"
	desc "#### Options"
	desc " * **`version`**: The version of the application."
	desc " * **`build_number`**: The build number of the application."
	desc ""
	private_lane :distribute do |options|
		version = options[:version]
		build_number = options[:build_number]
		new_arch_enabled = ENV["NEW_ARCH_ENABLED"].nil? ? true : get_boolean?(ENV["NEW_ARCH_ENABLED"])
		UI.message("Distributing #{display_name} #{version} (#{build_number}) 📦")

		modify_gradle_file(
			constant: "versionName",
			value: version,
		)

		modify_gradle_file(
			constant: "versionCode",
			value: build_number,
		)

		sh("echo \"#{ENV['SIGNING_CONFIGS']}\" > #{signing_configs_gradle}")

		modify_gradle_file(
			constant: "signingConfig",
			value: "signingConfigs.signing"
		)

		modify_gradle_file(
			constant: "apply plugin: 'com.facebook.react'",
			value: "apply from: 'signing_configs.gradle'",
			mode: "append"
		)

		gradle(
			task: "clean assembleDebug",
			properties: {
				"newArchEnabled" => new_arch_enabled
			}
		)

		firebase_app_distribution(
			app: ENV["FIREBASE_APP_ID_ANDROID"],
			groups: "developers, internal-testers, presales"
		)
		report_on_success("#{display_name} build completed: #{version} (#{build_number}) ✅")
	rescue => e
		report_on_error("#{display_name} build failed ❌", e)
	end
end
